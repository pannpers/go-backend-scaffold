// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package entity

import (
	"context"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPostRepository creates a new instance of MockPostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostRepository {
	mock := &MockPostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostRepository is an autogenerated mock type for the PostRepository type
type MockPostRepository struct {
	mock.Mock
}

type MockPostRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostRepository) EXPECT() *MockPostRepository_Expecter {
	return &MockPostRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockPostRepository
func (_mock *MockPostRepository) Create(ctx context.Context, params *NewPost) (*Post, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *NewPost) (*Post, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *NewPost) *Post); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *NewPost) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPostRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - params *NewPost
func (_e *MockPostRepository_Expecter) Create(ctx interface{}, params interface{}) *MockPostRepository_Create_Call {
	return &MockPostRepository_Create_Call{Call: _e.mock.On("Create", ctx, params)}
}

func (_c *MockPostRepository_Create_Call) Run(run func(ctx context.Context, params *NewPost)) *MockPostRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *NewPost
		if args[1] != nil {
			arg1 = args[1].(*NewPost)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostRepository_Create_Call) Return(post *Post, err error) *MockPostRepository_Create_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *MockPostRepository_Create_Call) RunAndReturn(run func(ctx context.Context, params *NewPost) (*Post, error)) *MockPostRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockPostRepository
func (_mock *MockPostRepository) Delete(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPostRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockPostRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockPostRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockPostRepository_Delete_Call {
	return &MockPostRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockPostRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *MockPostRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostRepository_Delete_Call) Return(err error) *MockPostRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPostRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockPostRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockPostRepository
func (_mock *MockPostRepository) Get(ctx context.Context, id string) (*Post, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*Post, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *Post); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPostRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockPostRepository_Expecter) Get(ctx interface{}, id interface{}) *MockPostRepository_Get_Call {
	return &MockPostRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockPostRepository_Get_Call) Run(run func(ctx context.Context, id string)) *MockPostRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostRepository_Get_Call) Return(post *Post, err error) *MockPostRepository_Get_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *MockPostRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id string) (*Post, error)) *MockPostRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Create(ctx context.Context, params *NewUser) (*User, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *NewUser) (*User, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *NewUser) *User); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *NewUser) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - params *NewUser
func (_e *MockUserRepository_Expecter) Create(ctx interface{}, params interface{}) *MockUserRepository_Create_Call {
	return &MockUserRepository_Create_Call{Call: _e.mock.On("Create", ctx, params)}
}

func (_c *MockUserRepository_Create_Call) Run(run func(ctx context.Context, params *NewUser)) *MockUserRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *NewUser
		if args[1] != nil {
			arg1 = args[1].(*NewUser)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_Create_Call) Return(user *User, err error) *MockUserRepository_Create_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_Create_Call) RunAndReturn(run func(ctx context.Context, params *NewUser) (*User, error)) *MockUserRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Delete(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockUserRepository_Delete_Call {
	return &MockUserRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockUserRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *MockUserRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_Delete_Call) Return(err error) *MockUserRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockUserRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Get(ctx context.Context, id string) (*User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUserRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUserRepository_Expecter) Get(ctx interface{}, id interface{}) *MockUserRepository_Get_Call {
	return &MockUserRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockUserRepository_Get_Call) Run(run func(ctx context.Context, id string)) *MockUserRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_Get_Call) Return(user *User, err error) *MockUserRepository_Get_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id string) (*User, error)) *MockUserRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}
