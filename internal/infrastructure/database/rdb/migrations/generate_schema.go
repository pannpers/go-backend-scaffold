//go:build ignore

package main

import (
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/pannpers/go-backend-scaffold/internal/infrastructure/database/rdb"
	"github.com/uptrace/bun"
	"github.com/uptrace/bun/dialect/pgdialect"
)

func main() {
	// Create a Bun DB instance without actual connection for DDL generation
	db := bun.NewDB(nil, pgdialect.New())

	// Create tables
	models := []any{
		(*rdb.User)(nil),
		(*rdb.Post)(nil),
	}

	var ddlStatements []string

	for _, model := range models {
		query := db.NewCreateTable().Model(model).IfNotExists().WithForeignKeys()
		ddl, err := query.AppendQuery(db.Formatter(), nil)
		if err != nil {
			log.Fatalf("Failed to generate DDL for model %T: %v", model, err)
		}

		// Simple formatting: add newlines after commas and proper indentation
		formatted := strings.ReplaceAll(string(ddl), ", ", ",\n  ")
		formatted = strings.Replace(formatted, " (", " (\n  ", 1)
		formatted = strings.Replace(formatted, ")", "\n)", 1)

		ddlStatements = append(ddlStatements, formatted)
	}

	// Generate schema.sql content
	schemaContent := `-- Auto-generated schema from Bun models
-- Generated by generate_schema.go

-- Enable uuid-ossp extension for UUID generation
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

`

	for _, ddl := range ddlStatements {
		schemaContent += ddl + ";\n\n"
	}

	// Write to schema.sql
	schemaPath := "internal/infrastructure/database/rdb/migrations/schema.sql"
	err := os.WriteFile(schemaPath, []byte(schemaContent), 0644)
	if err != nil {
		log.Fatalf("Failed to write schema.sql: %v", err)
	}

	fmt.Printf("Successfully generated schema.sql at %s\n", schemaPath)
	fmt.Println("Schema content:")
	fmt.Println(schemaContent)
}
