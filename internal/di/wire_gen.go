// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/pannpers/go-backend-scaffold/internal/infrastructure/server"
	"github.com/pannpers/go-backend-scaffold/internal/usecase"
)

// Injectors from wire.go:

// InitializeApp creates a new App with all dependencies wired up.
func InitializeApp(ctx context.Context) (*App, error) {
	config, err := provideConfig()
	if err != nil {
		return nil, err
	}
	logger := provideLogger(config)
	database, err := provideDatabase(ctx, config, logger)
	if err != nil {
		return nil, err
	}
	userRepository := provideUserRepository(database)
	userUseCase := usecase.NewUserUseCase(userRepository, logger)
	postRepository := providePostRepository(database)
	postUseCase := usecase.NewPostUseCase(postRepository, logger)
	v := provideHandlerFuncs(logger, database, userUseCase, postUseCase)
	connectServer := server.NewConnectServer(config, logger, database, v...)
	closer, err := provideTelemetry(ctx, config)
	if err != nil {
		return nil, err
	}
	app := newApp(connectServer, database, closer)
	return app, nil
}
